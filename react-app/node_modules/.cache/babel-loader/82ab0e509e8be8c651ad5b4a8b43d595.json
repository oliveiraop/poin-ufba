{"ast":null,"code":"var _jsxFileName = \"/home/RENATA.RIBEIRO/Documents/GitHub/poin-ufba/react-app/src/components/layout-components/HeaderNav.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Menu, Layout } from \"antd\";\nimport { MenuFoldOutlined, MenuUnfoldOutlined } from '@ant-design/icons';\nimport Logo from './Logo';\nimport NavPanel from './NavPanel';\nimport NavSearch from './NavSearch';\nimport { toggleCollapsedNav, onMobileNavToggle } from 'redux/actions/Theme';\nimport { NAV_TYPE_TOP, SIDE_NAV_COLLAPSED_WIDTH, SIDE_NAV_WIDTH } from 'constants/ThemeConstant';\nimport utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Header\n} = Layout;\nexport const HeaderNav = props => {\n  _s();\n\n  const {\n    navCollapsed,\n    mobileNav,\n    navType,\n    headerNavColor,\n    toggleCollapsedNav,\n    onMobileNavToggle,\n    isMobile,\n    currentTheme\n  } = props;\n  const [searchActive, setSearchActive] = useState(false);\n\n  const onSearchClose = () => {\n    setSearchActive(false);\n  };\n\n  const onToggle = () => {\n    if (!isMobile) {\n      toggleCollapsedNav(!navCollapsed);\n    } else {\n      onMobileNavToggle(!mobileNav);\n    }\n  };\n\n  const isNavTop = navType === NAV_TYPE_TOP ? true : false;\n\n  const mode = () => {\n    if (!headerNavColor) {\n      return utils.getColorContrast(currentTheme === 'dark' ? '#00000' : '#ffffff');\n    }\n\n    return utils.getColorContrast(headerNavColor);\n  };\n\n  const navMode = mode();\n\n  const getNavWidth = () => {\n    if (isNavTop || isMobile) {\n      return '0px';\n    }\n\n    if (navCollapsed) {\n      return `${SIDE_NAV_COLLAPSED_WIDTH}px`;\n    } else {\n      return `${SIDE_NAV_WIDTH}px`;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Header, {\n    className: `app-header ${navMode}`,\n    style: {\n      backgroundColor: headerNavColor\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `app-header-wrapper ${isNavTop ? 'layout-top-nav' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(Logo, {\n        logoType: navMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav\",\n        style: {\n          width: `calc(100% - ${getNavWidth()})`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-left\",\n          children: /*#__PURE__*/_jsxDEV(Menu, {\n            mode: \"horizontal\",\n            children: isNavTop && !isMobile ? null : /*#__PURE__*/_jsxDEV(Menu.Item, {\n              onClick: () => {\n                onToggle();\n              },\n              children: navCollapsed || isMobile ? /*#__PURE__*/_jsxDEV(MenuUnfoldOutlined, {\n                className: \"nav-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 47\n              }, this) : /*#__PURE__*/_jsxDEV(MenuFoldOutlined, {\n                className: \"nav-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 93\n              }, this)\n            }, \"0\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-right\",\n          children: /*#__PURE__*/_jsxDEV(NavPanel, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NavSearch, {\n          active: searchActive,\n          close: onSearchClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HeaderNav, \"AnR7eOlJxOp6lbomgkr9rM2UpRc=\");\n\n_c = HeaderNav;\n\nconst mapStateToProps = _ref => {\n  let {\n    theme\n  } = _ref;\n  const {\n    navCollapsed,\n    navType,\n    headerNavColor,\n    mobileNav,\n    currentTheme\n  } = theme;\n  return {\n    navCollapsed,\n    navType,\n    headerNavColor,\n    mobileNav,\n    currentTheme\n  };\n};\n\nexport default connect(mapStateToProps, {\n  toggleCollapsedNav,\n  onMobileNavToggle\n})(HeaderNav);\n\nvar _c;\n\n$RefreshReg$(_c, \"HeaderNav\");","map":{"version":3,"sources":["/home/RENATA.RIBEIRO/Documents/GitHub/poin-ufba/react-app/src/components/layout-components/HeaderNav.js"],"names":["React","useState","connect","Menu","Layout","MenuFoldOutlined","MenuUnfoldOutlined","Logo","NavPanel","NavSearch","toggleCollapsedNav","onMobileNavToggle","NAV_TYPE_TOP","SIDE_NAV_COLLAPSED_WIDTH","SIDE_NAV_WIDTH","utils","Header","HeaderNav","props","navCollapsed","mobileNav","navType","headerNavColor","isMobile","currentTheme","searchActive","setSearchActive","onSearchClose","onToggle","isNavTop","mode","getColorContrast","navMode","getNavWidth","backgroundColor","width","mapStateToProps","theme"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Menu, Layout } from \"antd\";\r\nimport { MenuFoldOutlined, MenuUnfoldOutlined } from '@ant-design/icons';\r\nimport Logo from './Logo';\r\nimport NavPanel from './NavPanel';\r\nimport NavSearch  from './NavSearch';\r\nimport { toggleCollapsedNav, onMobileNavToggle } from 'redux/actions/Theme';\r\nimport { NAV_TYPE_TOP, SIDE_NAV_COLLAPSED_WIDTH, SIDE_NAV_WIDTH } from 'constants/ThemeConstant';\r\nimport utils from 'utils'\r\n\r\nconst { Header } = Layout;\r\n\r\nexport const HeaderNav = props => {\r\n  const { navCollapsed, mobileNav, navType, headerNavColor, toggleCollapsedNav, onMobileNavToggle, isMobile, currentTheme } = props;\r\n  const [searchActive, setSearchActive] = useState(false)\r\n\r\n  const onSearchClose = () => {\r\n    setSearchActive(false)\r\n  }\r\n\r\n  const onToggle = () => {\r\n    if(!isMobile) {\r\n      toggleCollapsedNav(!navCollapsed)\r\n    } else {\r\n      onMobileNavToggle(!mobileNav)\r\n    }\r\n  }\r\n\r\n  const isNavTop = navType === NAV_TYPE_TOP ? true : false\r\n  const mode = ()=> {\r\n    if(!headerNavColor) {\r\n      return utils.getColorContrast(currentTheme === 'dark' ? '#00000' : '#ffffff' )\r\n    }\r\n    return utils.getColorContrast(headerNavColor)\r\n  }\r\n  const navMode = mode()\r\n  const getNavWidth = () => {\r\n    if(isNavTop || isMobile) {\r\n      return '0px'\r\n    }\r\n    if(navCollapsed) {\r\n      return `${SIDE_NAV_COLLAPSED_WIDTH}px`\r\n    } else {\r\n      return `${SIDE_NAV_WIDTH}px`\r\n    }\r\n  }\r\n  return (\r\n    <Header className={`app-header ${navMode}`} style={{backgroundColor: headerNavColor}}>\r\n      <div className={`app-header-wrapper ${isNavTop ? 'layout-top-nav' : ''}`}>\r\n        <Logo logoType={navMode}/>\r\n        <div className=\"nav\" style={{width: `calc(100% - ${getNavWidth()})`}}>\r\n          <div className=\"nav-left\">\r\n            <Menu mode=\"horizontal\">\r\n              {\r\n                isNavTop && !isMobile ?\r\n                null\r\n                :\r\n                <Menu.Item key=\"0\" onClick={() => {onToggle()}}>\r\n                  {navCollapsed || isMobile ? <MenuUnfoldOutlined className=\"nav-icon\" /> : <MenuFoldOutlined className=\"nav-icon\" />}\r\n                </Menu.Item>\r\n              }\r\n            </Menu>\r\n          </div>\r\n          <div className=\"nav-right\">\r\n            <NavPanel />\r\n          </div>\r\n          <NavSearch active={searchActive} close={onSearchClose}/>\r\n        </div>\r\n      </div>\r\n    </Header>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({ theme }) => {\r\n  const { navCollapsed, navType, headerNavColor, mobileNav, currentTheme } =  theme;\r\n  return { navCollapsed, navType, headerNavColor, mobileNav, currentTheme }\r\n};\r\n\r\nexport default connect(mapStateToProps, {toggleCollapsedNav, onMobileNavToggle})(HeaderNav);"]},"metadata":{},"sourceType":"module"}