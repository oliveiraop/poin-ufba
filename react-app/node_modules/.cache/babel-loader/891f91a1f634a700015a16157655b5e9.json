{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL } from 'configs/AppConfig';\nimport history from '../history';\nimport { AUTH_TOKEN } from 'redux/constants/Auth';\nimport { notification } from 'antd';\nconst service = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 60000\n}); // Config\n\nconst ENTRY_ROUTE = '/auth/login';\nconst TOKEN_PAYLOAD_KEY = 'authorization';\nconst PUBLIC_REQUEST_KEY = 'public-request'; // API Request interceptor\n\nservice.interceptors.request.use(config => {\n  const jwtToken = localStorage.getItem(AUTH_TOKEN);\n\n  if (jwtToken) {\n    config.headers[TOKEN_PAYLOAD_KEY] = jwtToken;\n  }\n\n  if (!jwtToken && !config.headers[PUBLIC_REQUEST_KEY]) {\n    history.push(ENTRY_ROUTE);\n    window.location.reload();\n  }\n\n  return config;\n}, error => {\n  // Do something with request error here\n  notification.error({\n    message: 'Error'\n  });\n  Promise.reject(error);\n}); // API respone interceptor\n\nservice.interceptors.response.use(response => {\n  return response.data;\n}, error => {\n  let notificationParam = {\n    message: ''\n  }; // Remove token and redirect \n\n  if (error.response.status === 400 || error.response.status === 403) {\n    notificationParam.message = 'Authentication Fail';\n    notificationParam.description = 'Please login again';\n    localStorage.removeItem(AUTH_TOKEN);\n    history.push(ENTRY_ROUTE);\n    window.location.reload();\n  }\n\n  if (error.response.status === 404) {\n    notificationParam.message = 'Not Found';\n  }\n\n  if (error.response.status === 500) {\n    notificationParam.message = 'Internal Server Error';\n  }\n\n  if (error.response.status === 508) {\n    notificationParam.message = 'Time Out';\n  }\n\n  notification.error(notificationParam);\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"sources":["/home/RENATA.RIBEIRO/Documents/GitHub/poin-ufba/react-app/src/auth/FetchInterceptor.js"],"names":["axios","API_BASE_URL","history","AUTH_TOKEN","notification","service","create","baseURL","timeout","ENTRY_ROUTE","TOKEN_PAYLOAD_KEY","PUBLIC_REQUEST_KEY","interceptors","request","use","config","jwtToken","localStorage","getItem","headers","push","window","location","reload","error","message","Promise","reject","response","data","notificationParam","status","description","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,YAAT,QAA6B,MAA7B;AAEA,MAAMC,OAAO,GAAGL,KAAK,CAACM,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEN,YADkB;AAE3BO,EAAAA,OAAO,EAAE;AAFkB,CAAb,CAAhB,C,CAKA;;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,iBAAiB,GAAG,eAA1B;AACA,MAAMC,kBAAkB,GAAG,gBAA3B,C,CAEA;;AACAN,OAAO,CAACO,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiCC,MAAM,IAAI;AAC1C,QAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqBf,UAArB,CAAjB;;AAEC,MAAIa,QAAJ,EAAc;AACZD,IAAAA,MAAM,CAACI,OAAP,CAAeT,iBAAf,IAAoCM,QAApC;AACD;;AAED,MAAI,CAACA,QAAD,IAAa,CAACD,MAAM,CAACI,OAAP,CAAeR,kBAAf,CAAlB,EAAsD;AACtDT,IAAAA,OAAO,CAACkB,IAAR,CAAaX,WAAb;AACAY,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACC;;AAED,SAAOR,MAAP;AACD,CAbD,EAaGS,KAAK,IAAI;AACX;AACApB,EAAAA,YAAY,CAACoB,KAAb,CAAmB;AAClBC,IAAAA,OAAO,EAAE;AADS,GAAnB;AAGCC,EAAAA,OAAO,CAACC,MAAR,CAAeH,KAAf;AACD,CAnBD,E,CAqBA;;AACAnB,OAAO,CAACO,YAAR,CAAqBgB,QAArB,CAA8Bd,GAA9B,CAAoCc,QAAD,IAAc;AAChD,SAAOA,QAAQ,CAACC,IAAhB;AACA,CAFD,EAEIL,KAAD,IAAW;AAEb,MAAIM,iBAAiB,GAAG;AACvBL,IAAAA,OAAO,EAAE;AADc,GAAxB,CAFa,CAMb;;AACA,MAAID,KAAK,CAACI,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiCP,KAAK,CAACI,QAAN,CAAeG,MAAf,KAA0B,GAA/D,EAAoE;AACnED,IAAAA,iBAAiB,CAACL,OAAlB,GAA4B,qBAA5B;AACAK,IAAAA,iBAAiB,CAACE,WAAlB,GAAgC,oBAAhC;AACAf,IAAAA,YAAY,CAACgB,UAAb,CAAwB9B,UAAxB;AACAD,IAAAA,OAAO,CAACkB,IAAR,CAAaX,WAAb;AACAY,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACA;;AAED,MAAIC,KAAK,CAACI,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AAClCD,IAAAA,iBAAiB,CAACL,OAAlB,GAA4B,WAA5B;AACA;;AAED,MAAID,KAAK,CAACI,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AAClCD,IAAAA,iBAAiB,CAACL,OAAlB,GAA4B,uBAA5B;AACA;;AAED,MAAID,KAAK,CAACI,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AAClCD,IAAAA,iBAAiB,CAACL,OAAlB,GAA4B,UAA5B;AACA;;AAEDrB,EAAAA,YAAY,CAACoB,KAAb,CAAmBM,iBAAnB;AAEA,SAAOJ,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACA,CAhCD;AAkCA,eAAenB,OAAf","sourcesContent":["import axios from 'axios'\r\nimport { API_BASE_URL } from 'configs/AppConfig'\r\nimport history from '../history'\r\nimport { AUTH_TOKEN } from 'redux/constants/Auth'\r\nimport { notification } from 'antd';\r\n\r\nconst service = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 60000\r\n})\r\n\r\n// Config\r\nconst ENTRY_ROUTE = '/auth/login'\r\nconst TOKEN_PAYLOAD_KEY = 'authorization'\r\nconst PUBLIC_REQUEST_KEY = 'public-request'\r\n\r\n// API Request interceptor\r\nservice.interceptors.request.use(config => {\r\n\tconst jwtToken = localStorage.getItem(AUTH_TOKEN)\r\n\t\r\n  if (jwtToken) {\r\n    config.headers[TOKEN_PAYLOAD_KEY] = jwtToken\r\n  }\r\n\r\n  if (!jwtToken && !config.headers[PUBLIC_REQUEST_KEY]) {\r\n\t\thistory.push(ENTRY_ROUTE)\r\n\t\twindow.location.reload();\r\n  }\r\n\r\n  return config\r\n}, error => {\r\n\t// Do something with request error here\r\n\tnotification.error({\r\n\t\tmessage: 'Error'\r\n\t})\r\n  Promise.reject(error)\r\n})\r\n\r\n// API respone interceptor\r\nservice.interceptors.response.use( (response) => {\r\n\treturn response.data\r\n}, (error) => {\r\n\r\n\tlet notificationParam = {\r\n\t\tmessage: ''\r\n\t}\r\n\t\r\n\t// Remove token and redirect \r\n\tif (error.response.status === 400 || error.response.status === 403) {\r\n\t\tnotificationParam.message = 'Authentication Fail'\r\n\t\tnotificationParam.description = 'Please login again'\r\n\t\tlocalStorage.removeItem(AUTH_TOKEN)\r\n\t\thistory.push(ENTRY_ROUTE)\r\n\t\twindow.location.reload();\r\n\t}\r\n\r\n\tif (error.response.status === 404) {\r\n\t\tnotificationParam.message = 'Not Found'\r\n\t}\r\n\r\n\tif (error.response.status === 500) {\r\n\t\tnotificationParam.message = 'Internal Server Error'\r\n\t}\r\n\t\r\n\tif (error.response.status === 508) {\r\n\t\tnotificationParam.message = 'Time Out'\r\n\t}\r\n\r\n\tnotification.error(notificationParam)\r\n\r\n\treturn Promise.reject(error);\r\n});\r\n\r\nexport default service"]},"metadata":{},"sourceType":"module"}